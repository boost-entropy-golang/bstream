// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: sf/bstream/test/v1/test.proto

package pbtest

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Block is a simple block message for which only the ID is required from which
// we derive for you the full `pbstream.Block` easily. The ID is expected to be
// provided in the form <num><id>, for example 1a or 2b or <num><parent_line>_<id>
// and is used to represents a forked block so you can represents forks easily:
//
//	1a -> 2a -> 3a (ID: 3a, ParentID: 2a) -> 4a (ID: 4a, ParentID: 3a)
//	       \ -> 3a_b (ID: 3b, ParentID: 2a) -> 4b (ID: 4b, ParentID: 3b)
//
// From this we offer of [ToPbbtreamBlock] to easily convert it to a `pbstream.Block`
// using the following rules:
//
// - The block ID is <num><id> (<parent_line>_ is removed on forked block)
// - The block number is the first character of the ID
// - The block ID is the full ID
// - The previous block ID is <num>-1 if <num> >= 1, otherwise it's empty
// - The previous block number is <num>-1 if <num> >= 1, otherwise it's 0
// - The block lib num is <num>-1 if <num> >= 1, otherwise it's 0
// - The block time is time.Unix(0, 0).UTC().Add(time.Minute * time.Duration(b.Number()))
type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_bstream_test_v1_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_sf_bstream_test_v1_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_sf_bstream_test_v1_test_proto_rawDescGZIP(), []int{0}
}

func (x *Block) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_sf_bstream_test_v1_test_proto protoreflect.FileDescriptor

var file_sf_bstream_test_v1_test_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x66, 0x2f, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x73, 0x66, 0x2e, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x22, 0x17, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x42, 0x48, 0x5a, 0x46,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x73, 0x74, 0x2f, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x66, 0x2f,
	0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x3b,
	0x70, 0x62, 0x74, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sf_bstream_test_v1_test_proto_rawDescOnce sync.Once
	file_sf_bstream_test_v1_test_proto_rawDescData = file_sf_bstream_test_v1_test_proto_rawDesc
)

func file_sf_bstream_test_v1_test_proto_rawDescGZIP() []byte {
	file_sf_bstream_test_v1_test_proto_rawDescOnce.Do(func() {
		file_sf_bstream_test_v1_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_sf_bstream_test_v1_test_proto_rawDescData)
	})
	return file_sf_bstream_test_v1_test_proto_rawDescData
}

var file_sf_bstream_test_v1_test_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_sf_bstream_test_v1_test_proto_goTypes = []interface{}{
	(*Block)(nil), // 0: sf.bstream.test.v1.Block
}
var file_sf_bstream_test_v1_test_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sf_bstream_test_v1_test_proto_init() }
func file_sf_bstream_test_v1_test_proto_init() {
	if File_sf_bstream_test_v1_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sf_bstream_test_v1_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sf_bstream_test_v1_test_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sf_bstream_test_v1_test_proto_goTypes,
		DependencyIndexes: file_sf_bstream_test_v1_test_proto_depIdxs,
		MessageInfos:      file_sf_bstream_test_v1_test_proto_msgTypes,
	}.Build()
	File_sf_bstream_test_v1_test_proto = out.File
	file_sf_bstream_test_v1_test_proto_rawDesc = nil
	file_sf_bstream_test_v1_test_proto_goTypes = nil
	file_sf_bstream_test_v1_test_proto_depIdxs = nil
}
