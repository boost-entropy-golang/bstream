// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: sf/bstream/forkable/v1/forkable.proto

package pbforkable

import (
	v1 "github.com/streamingfast/bstream/pb/sf/bstream/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ForkDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The mappings from block ID to parent's ID
	Links map[string]string `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The mappings from block ID to block's number
	Nums    map[string]uint64          `protobuf:"bytes,2,rep,name=nums,proto3" json:"nums,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Objects map[string]*ForkNodeObject `protobuf:"bytes,3,rep,name=objects,proto3" json:"objects,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LibRef  *v1.BlockRef               `protobuf:"bytes,4,opt,name=lib_ref,json=libRef,proto3" json:"lib_ref,omitempty"`
}

func (x *ForkDB) Reset() {
	*x = ForkDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_bstream_forkable_v1_forkable_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForkDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForkDB) ProtoMessage() {}

func (x *ForkDB) ProtoReflect() protoreflect.Message {
	mi := &file_sf_bstream_forkable_v1_forkable_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForkDB.ProtoReflect.Descriptor instead.
func (*ForkDB) Descriptor() ([]byte, []int) {
	return file_sf_bstream_forkable_v1_forkable_proto_rawDescGZIP(), []int{0}
}

func (x *ForkDB) GetLinks() map[string]string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *ForkDB) GetNums() map[string]uint64 {
	if x != nil {
		return x.Nums
	}
	return nil
}

func (x *ForkDB) GetObjects() map[string]*ForkNodeObject {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *ForkDB) GetLibRef() *v1.BlockRef {
	if x != nil {
		return x.LibRef
	}
	return nil
}

type ForkNodeObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Object:
	//
	//	*ForkNodeObject_Protobuf
	//	*ForkNodeObject_Json
	//	*ForkNodeObject_Binary
	Object isForkNodeObject_Object `protobuf_oneof:"object"`
}

func (x *ForkNodeObject) Reset() {
	*x = ForkNodeObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_bstream_forkable_v1_forkable_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForkNodeObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForkNodeObject) ProtoMessage() {}

func (x *ForkNodeObject) ProtoReflect() protoreflect.Message {
	mi := &file_sf_bstream_forkable_v1_forkable_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForkNodeObject.ProtoReflect.Descriptor instead.
func (*ForkNodeObject) Descriptor() ([]byte, []int) {
	return file_sf_bstream_forkable_v1_forkable_proto_rawDescGZIP(), []int{1}
}

func (m *ForkNodeObject) GetObject() isForkNodeObject_Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (x *ForkNodeObject) GetProtobuf() *anypb.Any {
	if x, ok := x.GetObject().(*ForkNodeObject_Protobuf); ok {
		return x.Protobuf
	}
	return nil
}

func (x *ForkNodeObject) GetJson() string {
	if x, ok := x.GetObject().(*ForkNodeObject_Json); ok {
		return x.Json
	}
	return ""
}

func (x *ForkNodeObject) GetBinary() []byte {
	if x, ok := x.GetObject().(*ForkNodeObject_Binary); ok {
		return x.Binary
	}
	return nil
}

type isForkNodeObject_Object interface {
	isForkNodeObject_Object()
}

type ForkNodeObject_Protobuf struct {
	Protobuf *anypb.Any `protobuf:"bytes,1,opt,name=protobuf,proto3,oneof"`
}

type ForkNodeObject_Json struct {
	Json string `protobuf:"bytes,2,opt,name=json,proto3,oneof"`
}

type ForkNodeObject_Binary struct {
	Binary []byte `protobuf:"bytes,3,opt,name=binary,proto3,oneof"`
}

func (*ForkNodeObject_Protobuf) isForkNodeObject_Object() {}

func (*ForkNodeObject_Json) isForkNodeObject_Object() {}

func (*ForkNodeObject_Binary) isForkNodeObject_Object() {}

var File_sf_bstream_forkable_v1_forkable_proto protoreflect.FileDescriptor

var file_sf_bstream_forkable_v1_forkable_proto_rawDesc = []byte{
	0x0a, 0x25, 0x73, 0x66, 0x2f, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x66, 0x6f, 0x72,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6f, 0x72, 0x6b, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x73, 0x66, 0x2e, 0x62, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x66, 0x6f, 0x72, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x73, 0x66, 0x2f, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xfb, 0x03, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6b, 0x44, 0x42, 0x12, 0x48, 0x0a, 0x05, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e,
	0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x66, 0x6f, 0x72, 0x6b, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x46, 0x6f, 0x72,
	0x6b, 0x44, 0x42, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x45, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x66, 0x6f, 0x72, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x44, 0x42, 0x2e, 0x4e, 0x75, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x73, 0x12, 0x4e, 0x0a, 0x07,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x73, 0x66, 0x2e, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x66, 0x6f, 0x72, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x46, 0x6f, 0x72, 0x6b, 0x44, 0x42, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x07,
	0x6c, 0x69, 0x62, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x66, 0x2e, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x52, 0x06, 0x6c, 0x69, 0x62, 0x52, 0x65, 0x66, 0x1a, 0x38,
	0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x75, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x6b, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x66, 0x6f, 0x72, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e,
	0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x12, 0x14, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x59,
	0x5a, 0x57, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x73, 0x74, 0x2f, 0x62, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2f, 0x66, 0x6f, 0x72, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x73,
	0x66, 0x2f, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x66, 0x6f, 0x72, 0x6b, 0x61, 0x62,
	0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x3b, 0x70,
	0x62, 0x66, 0x6f, 0x72, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_sf_bstream_forkable_v1_forkable_proto_rawDescOnce sync.Once
	file_sf_bstream_forkable_v1_forkable_proto_rawDescData = file_sf_bstream_forkable_v1_forkable_proto_rawDesc
)

func file_sf_bstream_forkable_v1_forkable_proto_rawDescGZIP() []byte {
	file_sf_bstream_forkable_v1_forkable_proto_rawDescOnce.Do(func() {
		file_sf_bstream_forkable_v1_forkable_proto_rawDescData = protoimpl.X.CompressGZIP(file_sf_bstream_forkable_v1_forkable_proto_rawDescData)
	})
	return file_sf_bstream_forkable_v1_forkable_proto_rawDescData
}

var file_sf_bstream_forkable_v1_forkable_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_sf_bstream_forkable_v1_forkable_proto_goTypes = []interface{}{
	(*ForkDB)(nil),         // 0: sf.bstream.forkable.v1.internal.ForkDB
	(*ForkNodeObject)(nil), // 1: sf.bstream.forkable.v1.internal.ForkNodeObject
	nil,                    // 2: sf.bstream.forkable.v1.internal.ForkDB.LinksEntry
	nil,                    // 3: sf.bstream.forkable.v1.internal.ForkDB.NumsEntry
	nil,                    // 4: sf.bstream.forkable.v1.internal.ForkDB.ObjectsEntry
	(*v1.BlockRef)(nil),    // 5: sf.bstream.v1.BlockRef
	(*anypb.Any)(nil),      // 6: google.protobuf.Any
}
var file_sf_bstream_forkable_v1_forkable_proto_depIdxs = []int32{
	2, // 0: sf.bstream.forkable.v1.internal.ForkDB.links:type_name -> sf.bstream.forkable.v1.internal.ForkDB.LinksEntry
	3, // 1: sf.bstream.forkable.v1.internal.ForkDB.nums:type_name -> sf.bstream.forkable.v1.internal.ForkDB.NumsEntry
	4, // 2: sf.bstream.forkable.v1.internal.ForkDB.objects:type_name -> sf.bstream.forkable.v1.internal.ForkDB.ObjectsEntry
	5, // 3: sf.bstream.forkable.v1.internal.ForkDB.lib_ref:type_name -> sf.bstream.v1.BlockRef
	6, // 4: sf.bstream.forkable.v1.internal.ForkNodeObject.protobuf:type_name -> google.protobuf.Any
	1, // 5: sf.bstream.forkable.v1.internal.ForkDB.ObjectsEntry.value:type_name -> sf.bstream.forkable.v1.internal.ForkNodeObject
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_sf_bstream_forkable_v1_forkable_proto_init() }
func file_sf_bstream_forkable_v1_forkable_proto_init() {
	if File_sf_bstream_forkable_v1_forkable_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sf_bstream_forkable_v1_forkable_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForkDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_bstream_forkable_v1_forkable_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForkNodeObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sf_bstream_forkable_v1_forkable_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ForkNodeObject_Protobuf)(nil),
		(*ForkNodeObject_Json)(nil),
		(*ForkNodeObject_Binary)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sf_bstream_forkable_v1_forkable_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sf_bstream_forkable_v1_forkable_proto_goTypes,
		DependencyIndexes: file_sf_bstream_forkable_v1_forkable_proto_depIdxs,
		MessageInfos:      file_sf_bstream_forkable_v1_forkable_proto_msgTypes,
	}.Build()
	File_sf_bstream_forkable_v1_forkable_proto = out.File
	file_sf_bstream_forkable_v1_forkable_proto_rawDesc = nil
	file_sf_bstream_forkable_v1_forkable_proto_goTypes = nil
	file_sf_bstream_forkable_v1_forkable_proto_depIdxs = nil
}
